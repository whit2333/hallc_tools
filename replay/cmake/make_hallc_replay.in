#!/bin/bash
set -u 

package=make_hallc_replay

REMOVE_LINKS=
CREATE_DIRS=
RAW_DIR=
ROOTFILE_DIR=
MONITOR_DIR=
BASE_REPLAY_DIR=$(@CMAKE_INSTALL_PREFIX@/bin/hallc_config --dir)

while test $# -gt 0; do
  case "$1" in
    -h|--help)
      echo "$package - builds a new hallc_replay directory by copying default directories"
      echo "  Usage:"
      echo "     $package [options] "
      echo "      "
      echo "  options:"
      echo "     -c, --create         create output directories (REPORT_OUTPUT)"
      echo "     -r, --raw <dir>      create link to raw directory "
      echo "     -R, --root <dir>     create link to rootfile directory "
      echo "     -m, --monitor <dir>  create link to monitoring directory "
      echo "     -d, --remove         remove symlinks"
      echo "     -h, --help           show brief help"
      echo "     -b, --replay-base    the replay directory to mirror"
      #echo "-o, --output-dir=DIR      specify a directory to store output in"
      exit 0
      ;;
    -d|--remove)
      REMOVE_LINKS=1
      shift
      ;;
    -c|--create)
      CREATE_DIRS=1
      shift
      ;;
    #--action*)
    #  export PROCESS=`echo $1 | sed -e 's/^[^=]*=//g'`
    #  shift
    #  ;;
    -R|--root)
      shift
      if test $# -gt 0; then
        ROOTFILE_DIR=$1
        if [ "${ROOTFILE_DIR:0:1}" = "-" ] ; then
          echo "option -R,--root requires a directory argument"  >&2
          exit 1
        fi
      else
        echo "option -R,--root requires a directory argument"  >&2
        echo "no rootfile dir specified"  >&2
        exit 1
      fi
      if [ ! -e "${ROOTFILE_DIR}" ] ; then
        echo "${ROOTFILE_DIR} does not exist"  >&2
        exit 1
      fi
      shift
      ;;
    -r|--raw)
      shift
      if test $# -gt 0; then
        RAW_DIR=$1
        if [ "${RAW_DIR:0:1}" = "-" ] ; then
          echo "option -r,--raw requires a directory argument"  >&2
          exit 1
        fi
      else
        echo "option -r,--raw requires a directory argument"  >&2
        echo "no raw dir specified"  >&2
        exit 1
      fi
      if [ ! -e "${RAW_DIR}" ] ; then
        echo "${RAW_DIR} does not exist"  >&2
        exit 1
      fi
      shift
      ;;
    -m|--monitor)
      shift
      if test $# -gt 0; then
        MONITOR_DIR=$1
        if [ "${MONITOR_DIR:0:1}" = "-" ] ; then
          echo "option -m,--monitor requires a directory argument"  >&2
          exit 1
        fi
      else
        echo "option -m,--monitor requires a directory argument"  >&2
        echo "no monitor dir specified"  >&2
        exit 1
      fi
      if [ ! -e "${MONITOR_DIR}" ] ; then
        echo "${MONITOR_DIR} does not exist"  >&2
        exit 1
      fi
      shift
      ;;
    -b|--base-replay)
      shift
      if test $# -gt 0; then
        BASE_REPLAY_DIR=$1
        if [ "${BASE_REPLAY_DIR:0:1}" = "-" ] ; then
          echo "option -b,--base-replay requires a directory argument"  >&2
          exit 1
        fi
        if [ ! -d "${BASE_REPLAY_DIR}/DBASE" ] ; then
          echo "${BASE_REPLAY_DIR}/DBASE does not exist"  >&2
          exit 1
        fi
      else
        echo "option -b,--base-replay requires a directory argument"  >&2
        echo "no base replay path specified"  >&2
        exit 1
      fi
      if [ ! -e "${BASE_REPLAY_DIR}" ] ; then
        echo "${BASE_REPLAY_DIR} does not exist"  >&2
        exit 1
      fi
      shift
      ;;
    #--output-dir*)
    #  export OUTPUT=`echo $1 | sed -e 's/^[^=]*=//g'`
    #  shift
    #  ;;
    *)
      break
      ;;
  esac
done


function do_copy_dirs {
  adir=$1
  my_link=$2
  if [ -L ${adir} ] ; then
    if [ -e ${adir} ] ; then
      #echo "Good link"
      if [ -n "${REMOVE_LINKS}" ] ; then
        echo "removing link ${adir} --> ${my_link}"
        rm ${adir}
      fi
    else
      if [ -n "${REMOVE_LINKS}" ] ; then
        echo "removing link ${adir} --> ${my_link}"
        rm ${adir}
      else 
        echo "Fixing broken link ${adir} --> ${my_link}"
        #ln -s ${my_link} ${adir}
        #cp -r ${my_link} ${adir}
      fi
    fi
  elif [ -e ${adir} ] ; then
    echo "Not a link"
  else
    if [ -z ${REMOVE_LINKS} ] ; then
      echo "Copying ${adir} --> ${my_link}"
      #ln -s ${my_link} ${adir}
      cp -r ${my_link} ${adir}
    fi
  fi
}
function dolinks {
  adir=$1
  my_link=$2
  if [ -L ${adir} ] ; then
    if [ -e ${adir} ] ; then
      #echo "Good link"
      if [ -n "${REMOVE_LINKS}" ] ; then
        echo "removing link ${adir} --> ${my_link}"
        rm ${adir}
      fi
    else
      if [ -n "${REMOVE_LINKS}" ] ; then
        echo "removing link ${adir} --> ${my_link}"
        rm ${adir}
      else 
        echo "Fixing broken link ${adir} --> ${my_link}"
        ln -s ${my_link} ${adir}
      fi
    fi
  elif [ -e ${adir} ] ; then
    echo "Not a link"
  else
    if [ -z ${REMOVE_LINKS} ] ; then
      echo "Adding link ${adir} --> ${my_link}"
      ln -s ${my_link} ${adir}
    fi
  fi
}

function make_output_dirs(){
  # Creates the non-symlinked replay directores such as
  # REPORT_OUTPUT
  # ROOTfiles
  mkdir -p REPORT_OUTPUT/SHMS/PRODUCTION
  mkdir -p REPORT_OUTPUT/HMS/PRODUCTION
  mkdir -p REPORT_OUTPUT/COIN/PRODUCTION
  mkdir -p REPORT_OUTPUT/SHMS/SCALERS
  mkdir -p REPORT_OUTPUT/HMS/SCALERS
  mkdir -p REPORT_OUTPUT/COIN/SCALERS

  echo "created directories: "
  echo "  REPORT_OUTPUT/SHMS/PRODUCTION"
  echo "  REPORT_OUTPUT/HMS/PRODUCTION"
  echo "  REPORT_OUTPUT/COIN/PRODUCTION"
  echo "  REPORT_OUTPUT/SHMS/SCALERS"
  echo "  REPORT_OUTPUT/HMS/SCALERS"
  echo "  REPORT_OUTPUT/COIN/SCALERS"
}

# -------------------------------------
#  main script 
# -------------------------------------

#replay_base_dir=$(@CMAKE_INSTALL_PREFIX@/bin/hallc_config --dir)
current_dir=$(pwd)
replay_base_dir=${BASE_REPLAY_DIR}

for adir in CALIBRATION
do
  my_link=${replay_base_dir}/${adir}
  do_copy_dirs ${adir} ${my_link}
done

for adir in  DATFILES DBASE DEF-files MAPS PARAM TEMPLATES SCRIPTS onlineGUI UTIL_SIDIS
do
  my_link=${replay_base_dir}/${adir}
  do_copy_dirs ${adir} ${my_link}
done

for adir in bin analysis db2
do
  my_link=${replay_base_dir}/${adir}
  do_copy_dirs ${adir} ${my_link}
done

if [ -n "${CREATE_DIRS}" ] ; then
  make_output_dirs
fi

if [ -n "${ROOTFILE_DIR}" ] ; then
  ln -s ${ROOTFILE_DIR} ROOTfiles
fi

if [ -n "${RAW_DIR}" ] ; then
  ln -s ${RAW_DIR} raw
fi

if [ -n "${MONITOR_DIR}" ] ; then
  ln -s ${MONITOR_DIR} monitoring
fi


